{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/TodoForm.js","Components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoItemContainer","styled","li","TodoItem","todo","onToggle","onRemove","id","text","done","toggle","useCallback","remove","style","textDecoration","onClick","TodoList","todos","data-testid","map","key","TodoFormContainer","form","TodoForm","onInsert","useState","value","setValue","onChange","e","target","onSubmit","preventDefault","placeholder","type","TodoContainer","main","TodoApp","setTodos","nextId","useRef","concat","current","filter","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oyBAGA,IAgBMA,EAAoBC,IAAOC,GAAV,KA4BRC,EA5CE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC3BC,EAAmBH,EAAnBG,GAAIC,EAAeJ,EAAfI,KAAMC,EAASL,EAATK,KAEZC,EAASC,uBAAY,kBAAMN,EAASE,KAAK,CAAEA,EAAIF,IAC/CO,EAASD,uBAAY,kBAAML,EAASC,KAAK,CAAEA,EAAID,IAErD,OACC,kBAACN,EAAD,KACC,0BAAMa,MAAO,CAAEC,eAAgBL,EAAO,eAAiB,QAAUM,QAASL,GACxEF,GAEF,4BAAQO,QAASH,GAAjB,kBCHYI,EARE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOZ,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACpC,OACC,wBAAIY,cAAY,YACdD,EAAME,KAAI,SAAAf,GAAI,OAAI,kBAAC,EAAD,CAAUA,KAAMA,EAAMgB,IAAKhB,EAAKG,GAAIF,SAAUA,EAAUC,SAAUA,S,uyBCHxF,IAwBMe,EAAoBpB,IAAOqB,KAAV,KAuCRC,EA/DE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACNC,mBAAS,IADH,mBAC1BC,EAD0B,KACnBC,EADmB,KAG5BC,EAAWjB,uBAAY,SAAAkB,GAC5BF,EAASE,EAAEC,OAAOJ,SAChB,IAEGK,EAAWpB,uBAChB,SAAAkB,GACCL,EAASE,GACTC,EAAS,IACTE,EAAEG,mBAEH,CAAER,EAAUE,IAGb,OACC,kBAACL,EAAD,CAAmBU,SAAUA,GAC5B,2BAAOE,YAAY,qDAAaP,MAAOA,EAAOE,SAAUA,IACxD,4BAAQM,KAAK,UAAb,kB,yMCjBH,IAoDMC,EAAgBlC,IAAOmC,KAAV,KASJC,EA7DC,WAAO,IAAD,EACOZ,mBAAS,CACpC,CACClB,GAAI,EACJC,KAAM,eACNC,MAAM,GAEP,CACCF,GAAI,EACJC,KAAM,8BACNC,MAAM,KAVa,mBACbQ,EADa,KACNqB,EADM,KAcfC,EAASC,iBAAO,GAEhBhB,EAAWb,uBAChB,SAAAH,GACC8B,EACCrB,EAAMwB,OAAO,CACZlC,GAAIgC,EAAOG,QACXlC,OACAC,MAAM,KAGR8B,EAAOG,SAAW,IAEnB,CAAEzB,IAGGZ,EAAWM,uBAChB,SAAAJ,GACC+B,EAASrB,EAAME,KAAI,SAAAf,GAAI,OAAKA,EAAKG,KAAOA,EAAZ,2BAAsBH,GAAtB,IAA4BK,MAAOL,EAAKK,OAASL,QAE9E,CAAEa,IAGGX,EAAWK,uBAChB,SAAAJ,GACC+B,EAASrB,EAAM0B,QAAO,SAAAvC,GAAI,OAAIA,EAAKG,KAAOA,QAE3C,CAAEU,IAGH,OACC,kBAACkB,EAAD,KACC,kBAAC,EAAD,CAAUX,SAAUA,IACpB,kBAAC,EAAD,CAAUP,MAAOA,EAAOZ,SAAUA,EAAUC,SAAUA,MCzC1CsC,MARf,WACC,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,QCMiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eb168afb.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport styled from 'styled-components';\n\nconst TodoItem = ({ todo, onToggle, onRemove }) => {\n\tconst { id, text, done } = todo;\n\n\tconst toggle = useCallback(() => onToggle(id), [ id, onToggle ]);\n\tconst remove = useCallback(() => onRemove(id), [ id, onRemove ]);\n\n\treturn (\n\t\t<TodoItemContainer>\n\t\t\t<span style={{ textDecoration: done ? 'line-through' : 'none' }} onClick={toggle}>\n\t\t\t\t{text}\n\t\t\t</span>\n\t\t\t<button onClick={remove}>삭제</button>\n\t\t</TodoItemContainer>\n\t);\n};\n\nconst TodoItemContainer = styled.li`\n\tlist-style: none;\n\twidth: 400px;\n\theight: 30px;\n\tposition: relative;\n\tmargin-bottom: 15px;\n\tfont-size: 18px;\n\tcolor: rgba(0, 0, 0, 0.8);\n\n\tspan {\n\t\tdisplay: inline-block;\n\t\twidth: 290px;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tcursor: pointer;\n\t}\n\n\tbutton {\n\t\twidth: 60px;\n\t\theight: 30px;\n\t\tmargin-left: 10px;\n\t\tborder: none;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #fff;\n\t\tcursor: pointer;\n\t\toutline: none;\n\t}\n`;\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, onToggle, onRemove }) => {\n\treturn (\n\t\t<ul data-testid='TodoList'>\n\t\t\t{todos.map(todo => <TodoItem todo={todo} key={todo.id} onToggle={onToggle} onRemove={onRemove} />)}\n\t\t</ul>\n\t);\n};\n\nexport default TodoList;\n","import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\n\nconst TodoForm = ({ onInsert }) => {\n\tconst [ value, setValue ] = useState('');\n\n\tconst onChange = useCallback(e => {\n\t\tsetValue(e.target.value);\n\t}, []);\n\n\tconst onSubmit = useCallback(\n\t\te => {\n\t\t\tonInsert(value);\n\t\t\tsetValue('');\n\t\t\te.preventDefault();\n\t\t},\n\t\t[ onInsert, value ]\n\t);\n\n\treturn (\n\t\t<TodoFormContainer onSubmit={onSubmit}>\n\t\t\t<input placeholder='할 일을 입력하세요' value={value} onChange={onChange} />\n\t\t\t<button type='submit'>등록</button>\n\t\t</TodoFormContainer>\n\t);\n};\n\nconst TodoFormContainer = styled.form`\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tpadding-top: 10%;\n\tmargin-bottom: 20px;\n\n\tinput {\n\t\twidth: 250px;\n\t\theight: 30px;\n\t\tborder: none;\n\t\tborder-bottom: 1px solid rgba(0, 0, 0, 0.5);\n\t\tfont-size: 18px;\n\t\toutline: none;\n\t\tpadding: 0 20px;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\n\t\t&::placeholder {\n\t\t\ttext-align: center;\n\t\t\tfont-size: 18px;\n\t\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\t}\n\t}\n\n\tbutton {\n\t\twidth: 60px;\n\t\theight: 30px;\n\t\tmargin-left: 15px;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #fff;\n\t\tborder: 1px solid rgba(0, 0, 0, 0.5);\n\t\tborder-radius: 5px;\n\t\tcursor: pointer;\n\t\toutline: none;\n\t}\n`;\n\nexport default TodoForm;\n","import React, { useState, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\n\nconst TodoApp = () => {\n\tconst [ todos, setTodos ] = useState([\n\t\t{\n\t\t\tid: 1,\n\t\t\ttext: 'TDD practice',\n\t\t\tdone: true\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttext: 'using react-testing-library',\n\t\t\tdone: true\n\t\t}\n\t]);\n\n\tconst nextId = useRef(3);\n\n\tconst onInsert = useCallback(\n\t\ttext => {\n\t\t\tsetTodos(\n\t\t\t\ttodos.concat({\n\t\t\t\t\tid: nextId.current,\n\t\t\t\t\ttext,\n\t\t\t\t\tdone: false\n\t\t\t\t})\n\t\t\t);\n\t\t\tnextId.current += 1;\n\t\t},\n\t\t[ todos ]\n\t);\n\n\tconst onToggle = useCallback(\n\t\tid => {\n\t\t\tsetTodos(todos.map(todo => (todo.id === id ? { ...todo, done: !todo.done } : todo)));\n\t\t},\n\t\t[ todos ]\n\t);\n\n\tconst onRemove = useCallback(\n\t\tid => {\n\t\t\tsetTodos(todos.filter(todo => todo.id !== id));\n\t\t},\n\t\t[ todos ]\n\t);\n\n\treturn (\n\t\t<TodoContainer>\n\t\t\t<TodoForm onInsert={onInsert} />\n\t\t\t<TodoList todos={todos} onToggle={onToggle} onRemove={onRemove} />\n\t\t</TodoContainer>\n\t);\n};\n\nconst TodoContainer = styled.main`\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-direction: column;\n`;\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from './Components/TodoApp';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<TodoApp />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}